iso2GCAM
typeof(iso2GCAM)
require(data.table)
as.data.table(iso2GCAM)
iso2GCAM=as.data.table(iso2GCAM)
iso2GCAM
require(moinput)
y
~/remind/inputdata/
n
?lowpass
?lowpass
require(moinput)
?lowpass
reload(moinput)
quit()
n
require(moinput)
y
~/remind/inputdata/
n
?lowpass
getConfig()
setConfig(forcecache=T)
fuel_prices_remind
data=vm_cesIO
data
str(data)
iso2GCAM
str(data)
gsub(".", "_", getRegions(data))
gsub("\.", "_", getRegions(data))
gsub("\\.", "_", getRegions(data))
gsub("\\.", "\\_", getRegions(data))
gsub("\\.", "_", getRegions(data))
require(dplyr)
mapping_region_country_remind
mapping_region_country_remind_load
tmp
fuel_price_REMIND
fuel_prices_remind
as.data.table(fuel_prices_remind)
str(fuel_prices_remind)
vignette("magclass")
new.magpie(cells_and_regions=c("A_B","C_d"))
vm_cesIO
vm_cesIO[, region:=gsub("\\.", "_", region)]
vm_cesIO
?setnames
data
vm_cesIO
str(vm_cesIO)
vm_cesIO
vm_cesIO
fuel_price_REMIND
vm_cesIO
saveRDS(vm_cesIO, file = "cesio.rds")
delete(vm_cesIO)
rm(vm_cesIO)
vm_cesIO
vm_cesIO = readRDS("cesio.rds")
vm_cesIO
fuel_price_REMIND
saveRDS(list("cesio"=vm_cesIO, "price"=fuel_price_REMIND), "full.rds")
mydata=readRDS("full.rds")
mydata
intensity
intensity
vehicle_intensity
saveRDS(vehicle_intensity, file="input_data_preparation/results/vehicle_intensity.rds")
saveRDS(load_factor, file="input_data_preparation/results/load_factor.rds")
saveRDS(non_energy_cost_result, file="input_data_preparation/results/non_energy_cost_result.rds")
saveRDS(tech_cost_calibr, file = "input_data_preparation/results/tech_cost_calibr.rds")
price_nonmot
saveRDS(price_nonmot, file = "input_data_preparation/results/price_nonmot.rds")
logit_exponents = list(logit_exponent_FV=logit_exponent_FV, logit_exponent_S2S3 = logit_exponent_S2S3, logit_exponent_S1S2=logit_exponent_S1S2, logit_exponent_VS1=logit_exponent_VS1, logit_exponent_S3S=logit_exponent_S3S)
logit_exponents
saveRDS(logit_exponents, file = "logit_exponents.rds")
saveRDS(logit_exponents, file = "input_data_preparation/results/logit_exponents.rds")
level_base = "base"
level_next = "FV"
logit_exponent
logit_exponents
level_next
level_base
base
vm_cesIO
?toolAggregate
new.magpie(cells_and_regions=c("a b", "c d"))
vm_cesIO
saveRDS(vm_cesIO, "vmcesio")
rm(vm_cesIO)
vm_cesIO
a=readRDS("vmcesio")
a
?toolAggregate
REMIND2ISO_MAPPING
typeof(REMIND2ISO_MAPPING)
getNames(REMIND2ISO_MAPPING)
colnames(REMIND2ISO_MAPPING)
colnames(REMIND2ISO_MAPPING)[2:3] = c("iso", "region")
REMIND2ISO_MAPPING
fix_GCAM_mapping()
?toolAggregate
?toolAggregate
vm_cesIO
TRUE & FALSE
FALSE & NULL
TRUE && FALSE
FALSE && NULL
getRegions(vm_cesIO)
n
common_iso
length(common_iso)
n
q
q
q()
quit()
c
conv_pkm_mj1
saveRDS(conv_pkm_mj1, "input_data_preparation/results/conv_pkm_mj.rds")
1:6:2
c(1990, seq(2005, 2060, by = 5))
c(1990, seq(2005, 2060, by = 5), seq(2070, 2110, by = 10), 2130, 2150)
conv_pkm_list = list(MJ_vkm_FV=MJ_vkm_FV, MJ_vkm_VS1=MJ_vkm_VS1, MJ_vkm_S1S2=MJ_vkm_S1S2, MJ_vkm_S2S3=MJ_vkm_S2S3,MJ_vkm_S3S=MJ_vkm_S3S)
MJ_vkm_FV
MJ_vkm_VS1
MJ_vkm_VS1
FV_final_SW
conv_pkm_list = list(MJ_vkm_FV=MJ_vkm_FV, MJ_vkm_VS1=MJ_vkm_VS1, MJ_vkm_S1S2=MJ_vkm_S1S2, MJ_vkm_S2S3=MJ_vkm_S2S3,MJ_vkm_S3S=MJ_vkm_S3S)
final_sws = list(FV_final_SW=FV_final_SW, VS1_final_SW=VS1_final_SW, S1S2_final_SW=S1S2_final_SW, S2S3_final_SW=S2S3_final_SW)
final_sws = list(FV_final_SW=FV_final_SW, VS1_final_SW=VS1_final_SW, S1S2_final_SW=S1S2_final_SW, S2S3_final_SW=S2S3_final_SW, S3S_final_SW=S3S_final_SW)
saveRDS(final_sws, "input_data_preparation/results/final_sws.rds")
saveRDS(list(value_time_S2S3=value_time_S2S3, value_time_S3S=value_time_S3S, value_time_S1S2=value_time_S1S2, value_time_FV=value_time_FV, value_time_VS1=value_time_VS1), "input_data_preparation/results/value_time.rds")
demand_EJ
data=demandF
mapping=GCAM2ISO_MAPPING
demandF
 if (subtype == "FE_stationary"){
getConfig()
getConfig()
getConfig()
quit()
n
require(moinput)
as?.magpie
?as.magpie
as.data.table(AirPassengers)
AirPassengers
as.data.table(AirPassengers, keep.rownames=T)
as.data.table(AirPassengers, keep.rownames=T)
painters
phones
data("phones")
data(package = .packages(all.available = TRUE))
WWWusage
LakeHuron
as.data.table(LakeHuron)
as.data.table(LakeHuron, keep.rownames=T)
Loblolly
women
volcano
petrol
uspop
DNase
BJsales
ChickWeight
dt=as.data.table(ChickWeight)
dt
xdata=1:21
xdata
test = interpolate_dt(dt, xdata, "Time", "weight", c("Chick", "Diet"))
test
test
test = interpolate_dt(dt, xdata, "Time", "weight", c("Chick", "Diet"))
test
test
test = interpolate_dt(dt, xdata, "Time", "weight", c("Chick", "Diet"))
test = interpolate_dt(dt, xdata, "Time", "weight", c("Chick", "Diet"))
test = interpolate_dt(dt, xdata, "Time", "weight", c("Chick", "Diet"))
test
test
xdata
idxcols=c("Chick", "Diet")
xcol="Time"
ycol="weight"
missing_xvals
vectors
result
result
?approx
?approx
xdata=0:21
?approx
result
result[Chick == 18 & Diet == 1]
test = interpolate_dt(dt, xdata, "Time", "weight", c("Chick", "Diet"))
test
test
test = interpolate_dt(dt, xdata, "Time", "weight", c("Chick", "Diet"))
test
test = interpolate_dt(dt, xdata, "Time", "weight", c("Chick", "Diet"))
test
dt = as.data.table(ChickWeight)
dt
test = interpolate_dt(dt, 0:21, "Time", "weight", c("Chick", "Diet"))
test
?approx
dt
dt[Chick == 1 & Diet == 1 & Time > 0, weight := NULL]
dt[Chick == 1 & Diet == 1 & Time > 0, weight := NA]
dt
test = interpolate_dt(dt, 0:21, "Time", "weight", c("Chick", "Diet"), extrapolate = T)
test = interpolate_dt(dt, 0:21, "Time", "weight", c("Chick", "Diet"), extrapolate = T)
delete test
remove(test)
test
dt
test = interpolate_dt(dt, 0:21, "Time", "weight", c("Chick", "Diet"), extrapolate = T)
dt
test = interpolate_dt(dt, 0:21, "Time", "weight", c("Chick", "Diet"), extrapolate = T)
test
test
test = interpolate_dt(dt, 0:21, "Time", "weight", c("Chick", "Diet"), extrapolate = T)
test
test
dt
test[Chick == 2]
dt[Chick==2]
?approx
result
result
?approx
result
result[Chick == 2]
result
?ifelse
?ifelse
test = interpolate_dt(dt, 0:21, "Time", "weight", c("Chick", "Diet"), extrapolate = T)
test
test
test[Chick==1]
dt[Chick == 1]
dt[Chick == 2 & Time > 2, weight := NA]
dt[Chick == 2]
test = interpolate_dt(dt, 0:21, "Time", "weight", c("Chick", "Diet"), extrapolate = T)
test[Chick == 2]
getConfig()
setConfig(forcecache=T)
getwd()
load("~/remind/testruns/trunk/default_2019-03-15_09.40.46/config.Rdata")
?stopifnot
setwd("~/remind/testruns/new_esm/default_2019-03-21_10.49.19/")
?stopif
?stop
warnings()
setwd("~/git/EDGE_transport/GCAM-R/")
setwd("input_data_preparation/level_0/")
??gather
require(tdyr)
require(tidyr)
ls
ls()
list.files()
setwd("~/remind/testruns/new_esm/default_2019-03-21_10.49.19/")
file.remove("GDPppp_isocountries.rds")
shares
shares
setwd("~/svn/remind-lib/")
require(devtools)
create("rmndt")
build()
setwd("rmndt/")
build()
build()
document()
document()
document()
load_all(".")
load_all(".")
document()
document()
load_all(".")
setwd("~/remind/testruns/new_esm/default_2019-03-21_10.49.19/")
quit()
n
getwd()
require(devtools)
load_all("~/svn/remind-lib/rmndt")
vm_cesIO
vm_cesIO
ppfen
ppfen
vm_cesIO
vm_cesIO
vm_cesIO
??setConfig
load_all("~/svn/remind-lib/rmndt")
??calcOutput
load_all("~/svn/remind-lib/rmndt")
load_all("~/svn/remind-lib/rmndt")
load_all("~/svn/remind-lib/rmndt")
load_all("~/svn/remind-lib/rmndt")
load_all("~/svn/remind-lib/rmndt")
load_all("~/svn/remind-lib/rmndt")
load_all("~/svn/remind-lib/rmndt")
setwd("~/svn/remind-lib/rmndt/")
use_testthat()
population_magpie
?madrat::aggregate
?magclass::aggregate
vignette("magclass")
?magpie::aggregate
?toolAggregate
mapping
pm
pm
mapping
data?
?data
data()
?data
prodfe = readgdx("~/remind/testruns/new_esm/default_2019-03-21_10.49.19/fulldata.gdx", "vm_prodFe")
prodfe = readgdx("~/remind/testruns/new_esm/default_2019-03-21_10.49.19/fulldata.gdx", "vm_prodFe")
prodfe = readgdx("/home/alois/remind/testruns/new_esm/default_2019-03-21_10.49.19/fulldata.gdx", "vm_prodFe")
prodfe
prodfe
setnames(prodfe, c("year", "region", "se", "fe", "te", "value"))
prodfe
save(prodfe, file="data/final_energy_production.rda")
save(prodfe, file="data/finalEnergy.rda")
?use_data
finalEnergy = prodfe
use_data(finalEnergy)
REMIND_FinalEnergy = prodfe
use_data(REMIND_FinalEnergy)
REMIND_RegionMap = fread("~/git/EDGE_transport/GCAM-R/data/remind/regionmappingH12.csv")
REMIND_RegionMap
REMIND_RegionMap = REMIND_RegionMap[, .(name=X, iso=CountryCode, region=RegionCode)]
REMIND_RegionMap
use_data(REMIND_RegionMap)
FEiso
region
country
require(testthat)
FEiso
sample(1:length(REMIND_RegionMap))
sample(1:length(REMIND_RegionMap), 1)
sample(1:length(REMIND_RegionMap), 1)
sample(1:length(REMIND_RegionMap), 1)
sample(1:nrow(REMIND_RegionMap), 1)
sample(1:nrow(REMIND_RegionMap), 1)
REMIND_RegionMap[, c("iso", "region")]
FEiso
FEsum
fac
reg
reg
typeof(REMIND_FinalEnergy$year)
REMIND_FinalEnergy[, year := as.numeric(year)]
use_data(REMIND_FinalEnergy)
use_data(REMIND_FinalEnergy, overwrite = T)
FEiso
FEiso
REMIND_FinalEnergy
FEavg
setwd("~/svn/remind-lib/rmndt/")
document()
load_all(".")
REMIND_RegionMap
mapping <- REMIND_RegionMap
mapping
typeof(mapping)
mapping <- REMIND_RegionMap
typeof(mapping)
mapping
mapping <- as.data.table(mapping)
mapping
mapping <- REMIND_RegionMap
mapping
mapping <- REMIND_RegionMap
mapping[, c("iso", "region")]
mapping[, c(isocol, regioncol)]
mapping[, c(get(isocol), get(regioncol))]
mapping <- REMIND_RegionMap
mapping
mapping[, .(get(regioncol), get(isocol))]
mapping[, c(regioncol=get(regioncol), isocol=get(isocol))]
mapping[, c(isocol, regioncol)]
mapping[, c("iso", "region")]
mapping
load_all(".")
FEiso
FEiso
FEavg
REMIND_FinalEnergy
test()
setwd("~/remind/testruns/new_esm/default_2019-03-21_10.49.19/")
fety
typeof(fety)
fety
fety
febal.m
febal.m
febal.m
fety
febal.m
budget.m
budget.m
pebal.m
require(fomatR)
require(formatr)
require(formatR)
tidy_file("~/git/EDGE_transport/GCAM-R/IEA_balances_harmonization.R")
?tidy_file
?tidy_source
tidy_file("~/git/EDGE_transport/GCAM-R/IEA_balances_harmonization.R", arrow=T, width.cutoff=80)
tidy_file("~/git/EDGE_transport/GCAM-R/IEA_balances_harmonization.R", arrow=T, width.cutoff=60)
tidy_file("~/git/EDGE_transport/GCAM-R/IEA_balances_harmonization.R", arrow=T, width.cutoff=80)
IEA_dt
IEA_dt
load_all("~/svn/remind-lib/rmndt/")
load_all("~/svn/remind-lib/rmndt/")
IEA_dt
IEA_dt
IEA_dt
IEA_dt
strsplit("ab", ".", fixed = T)
strsplit("ab.cd", ".", fixed = T)
strsplit("ab.cd.ef", ".", fixed = T)
data=IEA
data
IEA_dt
IEA_dt
data=IEA
data=IEA
data=IEA
data=IEA
data=IEA
data=IEA
str(IEA)
getNames(IEA)
getSets(IEA)
IEA_dt
IEA_dt
IEA_dt
IEA_dt
IEA_dt
IEA_dt
IEA_dt
IEA_dt
IEA_dt
IEA_dt
IEA_dt
GDPppp_country
str(GDPppp_country)
magpie2dt(GDPppp_country)
getwd()
setwd("~/svn/remind-lib/rmndt/")
document
document()
quit()
n
getwd()
setwd("~/remind/testruns/new_esm/default_2019-03-21_10.49.19/")
warnings()
traceback()
REMIND2ISO_MAPPING
str(tmp)
tmp
quit()
n
